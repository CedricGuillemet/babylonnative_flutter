group 'com.babylon.babylonnative'
version '1.0'


def jsEngineBaseDir = "${buildDir}/JS"
def jsEngineIncDir = "${jsEngineBaseDir}/include/V8"
def jsEngineLibDir = "${rootDir}/app/src/main/jniLibs"

def jsEngineLibName = "v8android"
if (project.hasProperty("JSEngine")) {
    jsEngineLibName = project.property("JSEngine")
    if ("${jsEngineLibName}" == "jsc" ) {
        jsEngineIncDir = "${jsEngineBaseDir}/include"
    }
}

def graphics_api = "OpenGL"
def platformVersion = 21
if (project.hasProperty("GRAPHICS_API")) {
    graphics_api = project.property("GRAPHICS_API")
    if ("${graphics_api}" == "Vulkan" ) {
        platformVersion = 24 // minimal version to get Vulkan
    }
}

def unity_build = "false"
if (project.hasProperty("UNITY_BUILD")) {
    unity_build = project.property("UNITY_BUILD")
}
def arcore_libpath = "${buildDir}/arcore-native"

configurations { natives }

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.2'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 31

    defaultConfig {
        externalNativeBuild {
            cmake {
                abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
                arguments "-DANDROID_STL=c++_shared",
                    "-DENABLE_PCH=OFF",
                    "-DGRAPHICS_API=${graphics_api}",
                    "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                    "-DANDROID_JSENGINE_LIBPATH=${jsEngineLibDir}",
                    "-DANDROID_JSENGINE_LIBNAME=${jsEngineLibName}",
                    "-DANDROID_JSENGINE_INCPATH=${jsEngineIncDir}",
                    "-DCMAKE_UNITY_BUILD=${unity_build}"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
    }

    externalNativeBuild {
        cmake {
            version '3.19.6'
            path 'CMakeLists.txt'
        }
    }
}


dependencies {
    // ARCore library
    implementation 'com.google.ar:core:1.14.0'
    natives 'com.google.ar:core:1.14.0'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}

task copyFiles {
    copy
    {
        from '../BabylonNative/Apps/node_modules/babylonjs'
        include "babylon.max.js"
        into 'src/main/assets/Scripts'
    }
    copy
    {
        from '../BabylonNative/Apps/node_modules/babylonjs-loaders'
        include "babylonjs.loaders.js"
        into 'src/main/assets/Scripts'
    }
    copy
    {
        from '../BabylonNative/Apps/node_modules/babylonjs-materials'
        include "babylonjs.materials.js"
        into 'src/main/assets/Scripts'
    }
    copy
    {
        from '../BabylonNative/Apps/node_modules/babylonjs-gui'
        include "babylon.gui.js"
        into 'src/main/assets/Scripts'
    }
    copy
    {
        from '../BabylonNative/Apps/Dependencies'
        include "*.js"
        into 'src/main/assets/Scripts'
    }
    copy
    {
        from '../BabylonNative/Apps/Scripts'
        include "*.js"
        into 'src/main/assets/Scripts'
    }
}

repositories {
    mavenLocal()
    maven {
        // Android JSC is installed from npm
        url "$rootDir/../BabylonNative/Apps/node_modules/jsc-android/dist"
    }
    maven {
        // Android V8 is installed from npm
        url "$rootDir/../BabylonNative/Apps/node_modules/v8-android/dist"
    }
    google()
    jcenter()
}

configurations 
{ 
    jscAndroid
    v8Android 
}

dependencies {
    jscAndroid 'org.webkit:android-jsc:+'
    v8Android 'org.chromium:v8-android:+'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractJSEngineLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    def jsconfig
    if ("${jsEngineLibName}" == "jsc" ) {
        jsconfig = configurations.jscAndroid
    } else {
        jsconfig = configurations.v8Android
    }
    doFirst {
        jsconfig.files.each { f ->
            copy {
                from zipTree(f)
                into jsEngineLibDir
                include "jni/**/*"
                // remove 'jni/'
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))  
                }
                includeEmptyDirs = false
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractJSEngineLibraries)
    }
}

task copyFilesJSHeaders {
    copy
    {
        from "${rootDir}/../BabylonNative/Apps/node_modules/jsc-android/dist/include"
        include "*"
        into "${jsEngineBaseDir}/include/JavaScriptCore"
    }
    copy
    {
        from "${rootDir}/../BabylonNative/Apps/node_modules/v8-android/dist/include"
        include "**/*"
        into "${jsEngineIncDir}"
    }
}

preBuild.dependsOn(copyFiles)
preBuild.dependsOn(copyFilesJSHeaders)
